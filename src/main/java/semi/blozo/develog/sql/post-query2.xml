<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>


	<!-- 모든 블로그 게시물 리스트 조회 -->
	<!-- 게시글 상태가 정상 + 캐러셀 최신순 -->
	<entry key="selectPostListAll">
	 	 SELECT  POST_NO, POST_TITLE, 
                POST_CONTENT,
                TO_CHAR(CREATE_DT ,'YYYY"년" MM"월" DD"일" HH24":"MI":"SS') CREATE_DT,
	        	TO_CHAR(POST.MODIFY_DT ,'YYYY"년" MM"월" DD"일" HH24":"MI":"SS') MODIFY_DT,
	        	READ_COUNT, LIKE_COUNT, BLOG.BLOG_NO, 
	        	BLOG_TITLE, MEMBER.MEMBER_NO, MEMBER_NM, 
               
                POST.POST_STATUS_CD, POST_STATUS_NM
                FROM POST
                JOIN BLOG ON(BLOG.BLOG_NO = POST.BLOG_NO)
                JOIN MEMBER ON(BLOG.MEMBER_NO = MEMBER.MEMBER_NO)
                JOIN POST_STATUS ON(POST.POST_STATUS_CD = POST_STATUS.POST_STATUS_CD)
                WHERE POST.POST_STATUS_CD IN (500, 504)
                ORDER BY CREATE_DT DESC
	</entry>
	
	
	<!-- 블로그 조회 후 결과가 있으면 메인페이지 출력 -->
	<!-- SNS 정보는 후순위로.. -->
	<entry key="selectBlog">
		SELECT BLOG_NO, BLOG_TITLE, BLOG.MEMBER_NO, MEMBER_NM, INTRO
        , SNS_EMAIL, SNS_GIT, SNS_TWITT, SNS_FBOOK, SNS_HOME
		FROM BLOG
		JOIN MEMBER ON(BLOG.MEMBER_NO = MEMBER.MEMBER_NO)
		JOIN MEMBER_SNS ON(BLOG.MEMBER_NO = MEMBER_SNS.MEMBER_NO)
		WHERE MEMBER_NM = ?
	</entry>
	
	
	<!-- 블로그 태그 조회는 따로 빼야할듯 -->
	
	
	
	
	<!-- 특정 블로그의 전체 게시물 수 조회 (삭제가 아닌 게시글) -->
	<entry key="getBlogListCount">
		SELECT COUNT(*) FROM POST
		JOIN BLOG USING(BLOG_NO)
        JOIN MEMBER USING(MEMBER_NO)
		WHERE POST_STATUS_CD != 501
		AND MEMBER_NM = ?
	</entry>
	
	
	<!-- 특정 블로그 전체 포스트 목록 조회 (삭제가 아닌 게시글) -->
	<entry key="selectBlogPostList">
		SELECT * FROM
		    (SELECT ROWNUM RNUM, A.*
		    FROM(SELECT * FROM V_POST_LIST   
		         WHERE POST_STATUS_CD != 501
		         AND MEMBER_NM = ?
		         ORDER BY POST_NO DESC) A )
		WHERE RNUM BETWEEN ? AND ?  
	</entry>
	
	
	<!-- postNo로 포스트 상세 조회하기 -->
	<entry key="selectPost">
		SELECT  POST_NO, POST_TITLE, 
                POST_CONTENT,
                TO_CHAR(CREATE_DT ,'YYYY"년" MM"월" DD"일" HH24":"MI":"SS') CREATE_DT,
	        	TO_CHAR(POST.MODIFY_DT ,'YYYY"년" MM"월" DD"일" HH24":"MI":"SS') MODIFY_DT,
	        	READ_COUNT, LIKE_COUNT, BLOG.BLOG_NO, 
	        	BLOG_TITLE, MEMBER.MEMBER_NO, MEMBER_NM, INTRO,
                CATEGORY.CATEGORY_CD, CATEGORY_NM,
                POST.POST_STATUS_CD, POST_STATUS_NM
       	FROM POST
       	JOIN BLOG ON(BLOG.BLOG_NO = POST.BLOG_NO)
        JOIN MEMBER ON(BLOG.MEMBER_NO = MEMBER.MEMBER_NO)
       	JOIN CATEGORY ON(POST.CATEGORY_CD = CATEGORY.CATEGORY_CD)
       	JOIN POST_STATUS ON(POST.POST_STATUS_CD = POST_STATUS.POST_STATUS_CD)
       	WHERE POST.POST_STATUS_CD != 501
       	AND POST_NO = ?
	</entry>
	
	
	<!-- 포스트 조회수 증가 -->
	<entry key="plusReadCount">
		UPDATE POST SET
		READ_COUNT = READ_COUNT + 1
		WHERE POST_NO = ?
	</entry>
	
	<!-- 썸네일 이미지 조회 -->
	<entry key="selectThumbImg">
		SELECT * FROM THUMB_IMG
		WHERE POST_NO = ?
	</entry>
	
	
	<!-- 태그 조회 (수정폼) -->
	<entry key="selectTagList">
		SELECT TAG_CD, TAG_NM
		FROM TAG
		WHERE POST_NO = ?
		ORDER BY TAG_CD
	</entry>

	<!-- 포스트 수정 -->
	<!-- 글 부분 -->
	<entry key="updatePost">
		UPDATE POST SET
		POST_TITLE = ?,
		POST_CONTENT = ?,
		MODIFY_DT = DEFAULT,
		CATEGORY_CD = ?,
		POST_STATUS_CD = ?
		WHERE POST_NO = ?
	</entry>
	
	<!-- 태그 부분 싹 지웠다가 다시 삽입 -->
	<entry key="deleteTag">
		DELETE FROM TAG WHERE POST_NO = ? 
	</entry>
	
	<!-- 태그 새로 삽입하기(태그수정) -->
	<entry key="updateTag">
		INSERT INTO TAG 
		VALUES(SEQ_TAG.NEXTVAL, ? , ?)
	</entry>
	
	<!-- 썸네일 수정 -->
	<entry key="updatePostThumb">
		UPDATE THUMB_IMG SET
		THUMB_IMG_NM = ?,
		THUMB_IMG_ORIGINAL = ?
		WHERE POST_NO = ?
	</entry>
	
	<!-- 포스트 삭제 -->
	<entry key="deletePost">
		UPDATE POST SET
		POST_STATUS_CD = 501
		WHERE POST_NO = ?
	</entry>



<!-- ****************************** 댓글 영역 ******************************* -->
	
	
	<!-- 포스트 댓글 조회 -->
	<entry key="selectPostReplyList">
		SELECT  REPLY_NO, REPLY_CONTENT,
		        TO_CHAR(REPLY_CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24":"MI":"SS') REPLY_CREATE_DT,
		        POST_NO, MEMBER_NO, MEMBER_NM,
		        REPLY_STATUS_CD, REPLY_STATUS_NM
		FROM REPLY
		JOIN MEMBER USING(MEMBER_NO)
		JOIN REPLY_STATUS USING(REPLY_STATUS_CD)
		WHERE REPLY_STATUS_NM != '삭제'
		AND POST_NO = ?
		ORDER BY REPLY_NO DESC 
	</entry>
	
	
	<!-- 포스트 댓글 삽입 -->
	<entry key="insertPostReply">
		INSERT INTO REPLY 
		VALUES( SEQ_REPLY.NEXTVAL, ?, DEFAULT, 
	    ?, ?, 600) 
	</entry>
	
	<!-- 포스트 비밀 댓글 삽입 -->
	<entry key="insertSecretReply">
		INSERT INTO REPLY
		VALUES( SEQ_REPLY.NEXTVAL, ?, DEFAULT,
		?, ?, 602)
	</entry>
	
	
	<!-- 포스트 댓글 수정 -->
	<entry key="updateReply">
		UPDATE REPLY SET
		REPLY_CONTENT = ?
		WHERE REPLY_NO = ?
	</entry>
	
	
	<!-- 포스트 댓글 삭제 -->
	<entry key="deleteReply">
		UPDATE REPLY SET
		REPLY_STATUS_CD = 603
		WHERE REPLY_NO = ?
	</entry>
	
	
	<!-- ************************ 좋아요 ******************************** -->
	
	
	<!-- 좋아요 추가 -->
	<entry key="likePost">
		INSERT INTO "LIKE"
		VALUES( ?, ? )
	</entry>
	
	<!-- 좋아요 취소 -->
	<entry key="likeCancel">
		DELETE FROM "LIKE" 
		WHERE POST_NO = ?
		AND MEMBER_NO = ?
	</entry>
	
	<!-- 좋아요 수 조회 -->
	<entry key="selectPostLikeCount">
		SELECT COUNT(*) FROM "LIKE"
		WHERE POST_NO = ?
	</entry>
	
	<!-- 좋아요 후 포스트에 반영 -->
	<entry key="setLikeCount">
		UPDATE POST SET
		LIKE_COUNT = ?
		WHERE POST_NO = ?
	</entry>
	
	<!-- 회원이 좋아요한 포스트인지 검사 -->
	<entry key="likedPost">
		SELECT COUNT(*)
		FROM "LIKE"
		WHERE POST_NO = ?
		AND MEMBER_NO = ?
	</entry>
	
	
	
	<!-- 조회수 증가 시간 -->
	<entry key="insertStaticReadCount">
		INSERT INTO STATIC_READ_COUNT
		VALUES(SEQ_STATIC_READ_COUNT.NEXTVAL, DEFAULT, ?)
	</entry>
	
	
	<!-- 블로그에 있는 모든 태그 조회 -->
	<entry key="selectBlogTagList">
		SELECT TAG_NM, POST_NO , POST_STATUS_CD
	    FROM TAG
	    JOIN POST USING(POST_NO)
		WHERE POST_NO IN 
    	(SELECT POST_NO FROM POST WHERE BLOG_NO = ?)
	</entry>
	

</properties>
